name: PR

on: [pull_request]

env:
  # Run all cargo commands with --verbose.
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1
  # Deny all compiler warnings.
  RUSTFLAGS: "-D warnings"
  # set the node, cli and authd version to be downloaded and used, and the time before tests should start
  SN_CLI_VERSION: "latest"
  SN_NODE_VERSION: "latest"
  SN_AUTHD_VERSION: "latest"
  TEST_STARTUP_INTERVAL: "40"

jobs:
  clippy:
    name: Rustfmt-Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install Rust and required components
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Check if the code is formatted correctly.
      - name: Check formatting
        run: cargo fmt --all -- --check

      # Run Clippy.
      - shell: bash
        run: ./scripts/clippy-all

  # Run `cargo build` in the root directory to test all build scripts.
  build-script:
    name: Build Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Test build scripts.
      - name: Build
        run: cargo build

  cargo-udeps:
    name: Unused dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Install Rust and required components
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      # Install and run cargo udeps to find unused cargo dependencies
      - name: cargo-udeps unused dependency check
        run: |
          cargo install cargo-udeps --locked
          cargo +nightly udeps --all-targets

  # Run test suite.
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # TODO: Reenable as we get tests going again
      # Run tests.
      # - shell: bash
      #   run: ./scripts/test-real-network

      - name: Doc Tests
        shell: bash
        run: cargo test --doc

  test-immutable-data:
    name: Test Immutable Data Upload
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Cache.
      - name: Cargo cache registry, index and build
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-cache-${{ hashFiles('**/Cargo.lock') }}

      # Test
      - name: Immutable Data Tests
        run: cargo test --features=testing create_and_retrieve # id tests only

  network-test:
    name: E2E against real network (latest node, cli & authd releases)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # Download shared script for starting a section, make it executable
      - name: Download start-local-section.sh
        run: |
          wget "https://raw.githubusercontent.com/maidsafe/QA/master/misc-scripts/start-local-section.sh"
          chmod +x start-local-section.sh

      # Run start-local-section.sh script to start a local section
      - name: Run start-local-section.sh
        run: ./start-local-section.sh ${{env.SN_NODE_VERSION}} ${{env.SN_CLI_VERSION}} ${{env.SN_AUTHD_VERSION}} ${{env.TEST_STARTUP_INTERVAL}}

      # Confirm nodes are running on this VM
      - name: Check if nodes are running
        run: pgrep -a sn_node

      # Print connection info
      - name: Print connection info
        run: cat ~/.safe/node/node_connection_info.config

      # Run tests.
      - name: Run the tests
        run: cargo test --release --features=simulated-payouts

      - name: Stop the network.
        if: failure()
        run: safe node killall || true && safe auth stop || true

      - name: Failure logs.
        if: failure()
        run: cat ~/.safe/node/baby-fleming-nodes/*/*.log

  # Test publish using --dry-run.
  test-publish:
    name: Test Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Install Rust
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Publish Dry Run
        run: cargo publish --dry-run
